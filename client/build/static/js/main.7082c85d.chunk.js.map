{"version":3,"sources":["views/CrewList.js","views/NewPirate.js","views/ShowPirate.js","App.js","serviceWorker.js","index.js"],"names":["useState","pirates","setPirates","loaded","setLoaded","useEffect","axios","get","then","res","data","type","onClick","e","navigate","map","pirate","key","_id","src","image","alt","name","width","height","pirateId","delete","filter","setName","setImage","chests","setChests","phrase","setPhrase","position","setPosition","pegLeg","setPegLeg","eyePatch","setEyePatch","hookHand","setHookHand","errors","setErrors","disabled","err","i","onSubmit","event","preventDefault","post","catch","errs","innerErrors","response","push","message","value","onChange","target","defaultValue","checked","id","setPirate","App","className","from","to","CrewList","path","NewPirate","ShowPirate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.7082c85d.chunk.js","sourcesContent":["import React, {useEffect,useState} from 'react';\r\nimport axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\n\r\nexport default () => {\r\n    const [pirates, setPirates] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pirates/')\r\n            .then(res => {\r\n                setPirates(res.data)\r\n                setLoaded(true)\r\n            })\r\n    }, [])\r\n    \r\n    const removePirate = pirateId => {\r\n        axios.delete('http://localhost:8000/api/pirate/' + pirateId)\r\n            .then(() => setPirates(pirates.filter(pirate => pirate._id !== pirateId)))\r\n    }\r\n\r\n    if(!loaded) return <h1>Loading...</h1>\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>Pirate Crew</h1>\r\n            <button type=\"button\" onClick={ (e)=>navigate('/pirate/new') }>Add Pirate</button>\r\n        </div>\r\n        {pirates.map(pirate => (\r\n        <div key={pirate._id}>\r\n            <img src={pirate.image} alt={pirate.name} width=\"250\" height=\"400\"/>\r\n            <h2>{pirate.name}</h2>\r\n            <button type=\"button\" onClick={ ()=> navigate('/pirate/'+pirate._id)}>View Pirate</button>\r\n            <button type=\"button\" onClick={ ()=> removePirate(pirate._id)}>Walk the Plank</button>\r\n        </div>\r\n        ))}\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {navigate} from '@reach/router';\r\nimport axios from 'axios';\r\n\r\nexport default () => {\r\n    const [name,setName] = useState('');\r\n    const [image,setImage] = useState('');\r\n    const [chests,setChests] = useState(0);\r\n    const [phrase,setPhrase] = useState('');\r\n    const [position,setPosition] = useState('');\r\n    const [pegLeg, setPegLeg] = useState(true);\r\n    const [eyePatch, setEyePatch] = useState(true);\r\n    const [hookHand, setHookHand] = useState(true);\r\n    const [errors,setErrors] = useState([]);\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        setErrors([]);\r\n\r\n        axios.post('http://localhost:8000/api/pirate', {\r\n            name,\r\n            image,\r\n            chests,\r\n            phrase,\r\n            position,\r\n            pegLeg,\r\n            eyePatch,\r\n            hookHand\r\n        })\r\n            .then(() => navigate('/pirates'))\r\n            .catch(err => {\r\n                const errs = [];\r\n                const innerErrors = err.response.data.errors;\r\n\r\n                for(const key in innerErrors){\r\n                    errs.push(innerErrors[key].message);\r\n                }\r\n                setErrors(errs);\r\n            })\r\n    }\r\n    \r\n    let disabled = false;\r\n\r\n    !name ? disabled = true\r\n    : !image ? disabled = true\r\n    : !phrase ? disabled = true\r\n    : !position ? disabled = true : disabled = false;\r\n    \r\n    return(\r\n        <>\r\n        <div>\r\n            <h1>Add Pirate</h1>\r\n            <button type=\"button\" onClick={() => navigate('/pirates')}>Crew Board</button>\r\n        </div>\r\n        {errors.map((err,i) => (\r\n            <p key={i}>{err}</p>\r\n        ))}\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label>Pirate Name:</label>\r\n                <input \r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Image Url:</label>\r\n                <input \r\n                    name=\"image\"\r\n                    value={image}\r\n                    onChange={e => setImage(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label># of Treasure Chests:</label>\r\n                <input \r\n                    type=\"number\"\r\n                    name=\"name\"\r\n                    value={chests}\r\n                    onChange={e => setChests(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Pirate Catch Phrase:</label>\r\n                <input \r\n                    name=\"phrase\"\r\n                    value={phrase}\r\n                    onChange={e => setPhrase(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Crew Position:</label>\r\n                <select \r\n                    name=\"position\"\r\n                    value={position}\r\n                    onChange={e => setPosition(e.target.value)}\r\n                >\r\n                    <option value=\"Captain\" defaultValue>Captain</option>\r\n                    <option value=\"First Mate\">First Mate</option>\r\n                    <option value=\"Quarter Master\">Quarter Master</option>\r\n                    <option value=\"Boatswain\">Boatswain</option>\r\n                    <option value=\"Powder Monkey\">Powder Monkey</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Peg Leg</label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={pegLeg}\r\n                    onChange={e => setPegLeg(e.target.checked)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Eye Patch</label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={eyePatch}\r\n                    onChange={e => setEyePatch(e.target.checked)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Hook Hand</label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={hookHand}\r\n                    onChange={e => setHookHand(e.target.checked)}\r\n                />\r\n            </div>\r\n            <button disabled={disabled}>Add Pirate</button>\r\n        </form>\r\n        </>\r\n    )\r\n}","import React, {useEffect,useState} from 'react';\r\nimport axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\n\r\nexport default ({id}) => {\r\n    const [pirate,setPirate] = useState(null);\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pirate/' + id)\r\n            .then(res => setPirate(res.data));\r\n    },[id]);\r\n\r\n    if(pirate === null) return 'Loading...';\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => navigate('/pirates')}>Crew Board</button>\r\n            <h1>{pirate.name}</h1>\r\n            <img src={pirate.image} alt={pirate.name}/>\r\n            <h2>{pirate.phrase}</h2>\r\n            <h2>About</h2>\r\n            <p>Position: {pirate.position}</p>\r\n            <p>Treasures: {pirate.chests}</p>\r\n            <p>Peg Leg: {pirate.pegLeg ? 'Yes' : 'No'} </p>\r\n            <p>Eye Patch: {pirate.eyePatch ? 'Yes' : 'No'} </p>\r\n            <p>Hook Hand: {pirate.hookHand ? 'Yes' : 'No'} </p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Router, Redirect} from '@reach/router';\nimport CrewList from './views/CrewList';\nimport NewPirate from './views/NewPirate';\nimport ShowPirate from './views/ShowPirate';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Redirect from='/' to='/pirates'/>\n        <CrewList path='/pirates'/>\n        <NewPirate path='/pirate/new'/>\n        <ShowPirate path='/pirate/:id'/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}